use "array.fc"
use "algorithms.fc"
use "math.fc"

import f32 intToFloat(int value);
import int floatToInt(f32 value);

// Types

struct Layout : Item
{
	spacing: 5
};

struct LayoutItem
{
	item,
	stretch: 0,
	minimum: 0,
	maximum: 32767
};

struct Column : Layout;
struct Row : Layout;

// Utility

function getWidth(Item item)
{
	return item.width;
}

function getHeight(Item item)
{
	return item.height;
}

function getNativeSize(Column column)
{
	return column.height;
}

function getNativeSize(Row row)
{
	return row.width;
}

function getForeignSize(Column column)
{
	return column.width;
}

function getForeignSize(Row column)
{
	return column.height;
}

// Layouting

struct LayoutInfo
{
	remainingStretch: 0.0,
	totalStretch: 0.0,
	numberOfItems: 0,
	spacing: 0,
	native: 0,
	foreign: 0
};

struct LayoutSize
{
	allocated,
	actual,
	stretch
};

function buildLayoutInfo(LayoutInfo info, Item item)
{
	return info with
	{
		totalStretch: info.totalStretch + intToFloat(item.stretch),
		numberOfItems: info.numberOfItems + 1,
	};
}

function calculateNativeItemSize(LayoutItem item, int overflow, LayoutInfo info)
{
	if (item.stretch > 0)
	{
		let spacing = (info.numberOfItems - 1) * info.spacing;
		let availableSize = info.native - spacing;

		let itemStretch = intToFloat(item.stretch);

		let allocatedSize = intToFloat(availableSize) * (itemStretch / info.totalStretch);
		let allocatedOverflow = intToFloat(overflow) * (itemStretch / info.remainingStretch);

		let proposedSize = floatToInt(allocatedSize + allocatedOverflow);

		if (proposedSize >= item.maximum)
		{
			return LayoutSize
			{
				allocated: floatToInt(allocatedSize),
				actual: item.maximum,
				stretch: info.remainingStretch - itemStretch,
			};
		}

		if (proposedSize <= item.minimum)
		{
			return LayoutSize
			{
				allocated: floatToInt(allocatedSize),
				actual: item.minimum,
				stretch: info.remainingStretch - itemStretch,
			};
		}

		return LayoutSize
		{
			allocated: floatToInt(allocatedSize),
			actual: proposedSize,
			stretch: info.remainingStretch - itemStretch,
		};
	}

	return LayoutSize
	{
		allocated: 0,
		actual: item.minimum,
		stretch: info.remainingStretch,
	};
}

function getOverflow((any i, ...items))
{
	return tail getOverflow(...items);
}

function getOverflow(int overflow)
{
	return overflow;
}

function getOverflow(any i)
{
	return 0;
}

function solve(int overflow, EventState events, LayoutInfo info, Layout item, Layout nextItem)
{
	let result = layout(events, 0, overflow, info, item.children, nextItem.children);

	let remainingOverflow = getOverflow(result);

	if (remainingOverflow != 0)
	{
		return tail solve(remainingOverflow, events, info, item, nextItem);
	}

	return item with
	{
		children: result
	};
}

// Draw

function draw(long renderer, without parent, Layout item)
{
	return draw(renderer, item, item.children);
}

function draw(long renderer, Item parent, Layout item)
{
	let surrogate = parent with
	{
		x: parent.x + item.x,
		y: parent.y + item.y
	};

	return draw(renderer, surrogate, item.children);
}

function draw(long renderer, any parent, LayoutItem item)
{
	return draw(renderer, parent, item.item);
}

// Process

function process(ApplicationState state, (Layout item, ...controls))
{
	return tail process(state, ...controls);
}

function process(ApplicationState state, Layout item)
{
	return state.user;
}

// Update

function update(EventState events, any parent, Layout item, Layout nextItem)
{
	let adapted = item with
	{
		width: getWidth(parent),
		height: getHeight(parent),
	};

	let seed = LayoutInfo
	{
		spacing: item.spacing,
		native: getNativeSize(adapted),
		foreign: getForeignSize(adapted),
	};

	let info = Array::aggregate(item.children, seed, buildLayoutInfo);

	let withRemainingStretch = info with
	{
		remainingStretch: info.totalStretch,
	};

	return solve(0, events, withRemainingStretch, adapted, nextItem);
}

function update(EventState events, any parent, (Layout item, ...controls), (Layout nextItem, ...nextControls))
{
	return tail update(events, parent, item, nextItem) -> update(events, parent, ...controls, ...nextControls);
}

// Column

function layout(EventState events, int offset, int overflow, LayoutInfo info, LayoutItem item, LayoutItem nextItem)
{
	let nis = calculateNativeItemSize(item, overflow, info);

	let layouted = item.item with
	{
		y: offset,
		width: info.foreign,
		height: nis.actual,
	};

	let remainingOverflow = (nis.allocated - nis.actual) + overflow;

	if (remainingOverflow != 0)
	{
		return remainingOverflow;
	}

	return item with
	{
		item: update(events, nothing, layouted, nextItem.item)
	};
}

function layout(EventState events, int offset, int overflow, LayoutInfo info, (LayoutItem item, ...items), (LayoutItem nextItem, ...nextItems))
{
	let nis = calculateNativeItemSize(item, overflow, info);

	let layouted = item.item with
	{
		y: offset,
		width: info.foreign,
		height: nis.actual,
	};

	let result = item with
	{
		item: update(events, nothing, layouted, nextItem.item)
	};

	let nextOffset = nis.actual + offset + info.spacing;
	let remainingOverflow = (nis.allocated - nis.actual) + overflow;

	let withRemainingStretch = info with
	{
		remainingStretch: nis.stretch,
	};

	return result -> layout(events, nextOffset, remainingOverflow, withRemainingStretch, ...items, ...nextItems);
}

// Row

// function layout(EventState events, Row row, int offset, int overflow, LayoutInfo info, LayoutItem item, LayoutItem nextItem)
// {
// 	let spacing = (info.numberOfItems - 1) * row.spacing;
// 	let availableSize = getNativeSize(row) - spacing;
// 	let layouted = item.item with
// 	{
// 		x: offset,
// 		width: calculateNativeItemSize(item, availableSize, info.totalStretch),
// 		height: row.height,
// 	};
//
// 	return update(events, row, layouted, nextItem);
// }
//
// function layout(EventState events, Row row, int offset, int overflow, LayoutInfo info, (LayoutItem item, ...items), (LayoutItem nextItem, ...nextItems))
// {
// 	let spacing = (info.numberOfItems - 1) * row.spacing;
// 	let availableSize = getNativeSize(row) - spacing;
// 	let width = calculateNativeItemSize(item, availableSize, info.totalStretch);
// 	let layouted = item.item with
// 	{
// 		x: offset,
// 		width: width,
// 		height: row.height
// 	};
//
// 	return update(events, row, layouted, nextItem) -> layout(events, row, width + offset + row.spacing, overflow, info, ...items, ...nextItems);
// }

// Common

function layout(EventState events, int offset, int overflow, LayoutInfo info, (LayoutItem item, ...items), LayoutItem nextItem)
{
	return nothing;
}

function layout(EventState events, int offset, int overflow, LayoutInfo info, LayoutItem item, (LayoutItem nextItem, ...nextItems))
{
	return nothing;
}
