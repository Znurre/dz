struct Rectangle : Item
{
    color: Color {}
};

function update(EventState events, Rectangle rectangle, Rectangle nextItem)
{
    return rectangle with
    {
        children: update(events, rectangle.children, nextItem.children)
    };
}

function update(EventState events, (Rectangle rectangle, ...controls), (Rectangle nextItem, ...nextControls))
{
    let r = rectangle with
    {
        children: update(events, rectangle.children, nextItem.children)
    };

	return r -> update(events, ...controls, ...nextControls);
}

function process(ApplicationState state, (Rectangle rectangle, ...controls))
{
	let s = state with
	{
		user: process(state, rectangle.children)
	};

    return tail process(s, ...controls);
}

function process(ApplicationState state, Rectangle rectangle)
{
    return process(state, rectangle.children);
}

function draw(long renderer, any parent, without item)
{
    return nothing;
}

function draw(long renderer, any parent, Rectangle rectangle)
{
    setRenderDrawColor(renderer, rectangle.color);

    SDL::SDL_RenderFillRect(renderer, boundingRect(rectangle, parent));

    return tail draw(renderer, rectangle, rectangle.children);
}
