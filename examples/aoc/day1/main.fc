global O_RDONLY: 0

import int printNumber(int number);
import int open(string apathname, int flags);
import int getc(long stream);

import long fdopen(int fildes, string mode);

function readChar(long file)
{
    return getc(file) -> readChar(file);
}

function nextNumber(int accumulation, (int char, ...chars))
{
    if (char == '\n') // New line
    {
        return accumulation -> nextNumber(0, ...chars);
    }

    if (char < 0) // EOF
    {
        return accumulation;
    }

    return tail nextNumber((accumulation * 10) + (char - '0'), ...chars);
}

function part1(int count, int previous, int number)
{
    if (number > previous)
    {
        return count + 1;
    }

    return count;
}

function part1(int count, int previous, (int number, ...numbers))
{
    if (previous < 0)
    {
        return tail part1(count, number, ...numbers);
    }

    if (number < previous)
    {
        return tail part1(count, number, ...numbers);
    }

    return tail part1(count + 1, number, ...numbers);
}

function part2(int i, int count, int x, int y, int z, int number)
{
    return count;
}

function part2(int i, int count, int x, int y, int z, (int number, ...numbers))
{
    if (i < 3)
    {
        return tail part2(i + 1, count, y, z, number, ...numbers);
    }

    if ((x + y + z) < (y + z + number))
    {
        return tail part2(i + 1, count + 1, y, z, number, ...numbers);
    }

    return tail part2(i + 1, count, y, z, number, ...numbers);
}

function bind(int result1, int result2)
{
    return [result1, result2];
}

function run()
{
    return bind(
        part1(0, -1
            , nextNumber(0
                , readChar(fdopen(open(@"input", O_RDONLY), @"r"))
                )
            ),
        part2(0, 0, 0, 0, 0
            , nextNumber(0
                , readChar(fdopen(open(@"input", O_RDONLY), @"r"))
                )
            )
    );
}

function printNumbers(int number)
{
    return printNumber(number);
}

function printNumbers((int number, ...numbers))
{
    printNumber(number);

    return tail printNumbers(...numbers);
}

export int main()
{
    return printNumbers(run());
}
